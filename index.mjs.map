{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport capitalize from '@stdlib/string-capitalize' ;\nimport lowercase from '@stdlib/string-lowercase' ;\nimport replace from '@stdlib/string-replace' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport trim from '@stdlib/string-trim' ;\n\n\n// VARIABLES //\n\nvar RE_WHITESPACE = /\\s+/g;\nvar RE_SPECIAL = /[-!\"'(),â€“.:;<>?`{}|~\\/\\\\\\[\\]_#$*&^@%]+/g; // eslint-disable-line no-useless-escape\nvar RE_TO_CAMEL = /(?:\\s|^)([^\\s]+)(?=\\s|$)/g;\nvar RE_CAMEL = /([a-z0-9])([A-Z])/g;\n\n\n// FUNCTIONS //\n\n/**\n* Converts first capture group to uppercase.\n*\n* @private\n* @param {string} match - entire match\n* @param {string} p1 - first capture group\n* @param {number} offset - offset of the matched substring in entire string\n* @returns {string} uppercased capture group\n*/\nfunction replacer( match, p1, offset ) {\n\tp1 = lowercase( p1 );\n\treturn ( offset === 0 ) ? p1 : capitalize( p1 );\n}\n\n\n// MAIN //\n\n/**\n* Converts a string to camel case.\n*\n* @param {string} str - string to convert\n* @throws {TypeError} must provide a string primitive\n* @returns {string} camel-cased string\n*\n* @example\n* var out = camelcase( 'foo bar' );\n* // returns 'fooBar'\n*\n* @example\n* var out = camelcase( 'IS_MOBILE' );\n* // returns 'isMobile'\n*\n* @example\n* var out = camelcase( 'Hello World!' );\n* // returns 'helloWorld'\n*\n* @example\n* var out = camelcase( '--foo-bar--' );\n* // returns 'fooBar'\n*/\nfunction camelcase( str ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0h63R', str ) );\n\t}\n\tstr = replace( str, RE_SPECIAL, ' ' );\n\tstr = replace( str, RE_WHITESPACE, ' ' );\n\tstr = replace( str, RE_CAMEL, '$1 $2' );\n\tstr = trim( str );\n\tstr = replace( str, RE_TO_CAMEL, replacer );\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default camelcase;\n"],"names":["RE_WHITESPACE","RE_SPECIAL","RE_TO_CAMEL","RE_CAMEL","replacer","match","p1","offset","lowercase","capitalize","camelcase","str","isString","TypeError","format","replace","trim"],"mappings":";;8gBAgCA,IAAIA,EAAgB,OAChBC,EAAa,0CACbC,EAAc,4BACdC,EAAW,qBAcf,SAASC,EAAUC,EAAOC,EAAIC,GAE7B,OADAD,EAAKE,EAAWF,GACI,IAAXC,EAAiBD,EAAKG,EAAYH,GA6B5C,SAASI,EAAWC,GACnB,IAAMC,EAAUD,GACf,MAAM,IAAIE,UAAWC,EAAQ,QAASH,IAOvC,OALAA,EAAMI,EAASJ,EAAKV,EAAY,KAChCU,EAAMI,EAASJ,EAAKX,EAAe,KACnCW,EAAMI,EAASJ,EAAKR,EAAU,SAC9BQ,EAAMK,EAAML,GACZA,EAAMI,EAASJ,EAAKT,EAAaE"}